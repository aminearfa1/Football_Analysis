data_clean <- na.omit(data)
results_clean <- na.omit(results)
# Préparer les données pour le diagramme circulaire global
player_goals <- data_clean %>%
group_by(scorer) %>%
summarise(total_goals = n(), .groups = "drop") %>%
arrange(total_goals) %>%
mutate(percent = round(total_goals / sum(total_goals) * 100, 2))
# Sélectionner le top 10 des buteurs
top_scorers <- tail(player_goals, 10)
# Palette de couleurs
color_palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(top_scorers$scorer))
# Fonction pour créer un diagramme circulaire avec pourcentages
create_pie_chart <- function(data, title) {
ggplot(data, aes(x="", y=total_goals, fill=scorer)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=color_palette) +
theme_void() +
labs(title = title, x = "", y = "") +
geom_text(aes(label = percent), position=position_stack(vjust=0.5), color="black", size=3)
}
# Calcul des pourcentages
total_goals_sum <- sum(top_scorers$total_goals)
top_scorers <- top_scorers %>%
mutate(percent = round(total_goals / total_goals_sum * 100, 2))
# Créer le diagramme circulaire global
pie_chart_global <- create_pie_chart(top_scorers, "Top 10 des Buteurs")
# Fusionner les données pour l'analyse domicile/extérieur
merged_data <- merge(data_clean, results_clean, by = c("date", "home_team", "away_team"))
merged_data <- merged_data %>%
mutate(context = ifelse(team == home_team, "Domicile", "Extérieur"))
# Calcul des buts à domicile et à l'extérieur
goals_home_away <- merged_data %>%
group_by(scorer, context) %>%
summarise(total_goals = n(), .groups = "drop") %>%
ungroup()
# Sélectionner le top 10 des buteurs à domicile et à l'extérieur
top_scorers_home <- goals_home_away %>%
filter(context == "Domicile") %>%
arrange(total_goals) %>%
tail(10)
top_scorers_away <- goals_home_away %>%
filter(context == "Extérieur") %>%
arrange(total_goals) %>%
tail(10)
# Calcul des pourcentages pour domicile
total_goals_home_sum <- sum(top_scorers_home$total_goals)
top_scorers_home <- top_scorers_home %>%
mutate(percent = round(total_goals / total_goals_home_sum * 100, 2))
# Calcul des pourcentages pour extérieur
total_goals_away_sum <- sum(top_scorers_away$total_goals)
top_scorers_away <- top_scorers_away %>%
mutate(percent = round(total_goals / total_goals_away_sum * 100, 2))
# Créer les diagrammes pour domicile et extérieur
pie_chart_home <- create_pie_chart(top_scorers_home, "Top 10 des Buteurs à Domicile")
pie_chart_away <- create_pie_chart(top_scorers_away, "Top 10 des Buteurs à l'Extérieur")
# Afficher les trois figures en forme de triangle
grid.arrange(pie_chart_global, pie_chart_home, pie_chart_away, nrow = 2, ncol = 2, layout_matrix = rbind(c(1, 1), c(2, 3)))
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Lire les données
data <- read.csv('goalscorers.csv')
results <- read.csv('results.csv')
# Exclure les lignes avec des valeurs NA dans la colonne 'scorer'
data_clean <- na.omit(data)
results_clean <- na.omit(results)
# Préparer les données pour le diagramme circulaire global
player_goals <- data_clean %>%
group_by(scorer) %>%
summarise(total_goals = n(), .groups = "drop") %>%
arrange(desc(total_goals)) %>%
mutate(percent = round(total_goals / sum(total_goals) * 100, 2))
# Sélectionner le top 10 des buteurs
top_scorers <- tail(player_goals, 10)
# Palette de couleurs
color_palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(top_scorers$scorer))
# Fonction pour créer un diagramme circulaire avec pourcentages
create_pie_chart <- function(data, title) {
ggplot(data, aes(x="", y=total_goals, fill=scorer)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=color_palette) +
theme_void() +
labs(title = title, x = "", y = "") +
geom_text(aes(label = percent), position=position_stack(vjust=0.5), color="black", size=3)
}
# Calcul des pourcentages
total_goals_sum <- sum(top_scorers$total_goals)
top_scorers <- top_scorers %>%
mutate(percent = round(total_goals / total_goals_sum * 100, 2))
# Créer le diagramme circulaire global
pie_chart_global <- create_pie_chart(top_scorers, "Top 10 des Buteurs")
# Fusionner les données pour l'analyse domicile/extérieur
merged_data <- merge(data_clean, results_clean, by = c("date", "home_team", "away_team"))
merged_data <- merged_data %>%
mutate(context = ifelse(team == home_team, "Domicile", "Extérieur"))
# Calcul des buts à domicile et à l'extérieur
goals_home_away <- merged_data %>%
group_by(scorer, context) %>%
summarise(total_goals = n(), .groups = "drop") %>%
ungroup()
# Sélectionner le top 10 des buteurs à domicile et à l'extérieur
top_scorers_home <- goals_home_away %>%
filter(context == "Domicile") %>%
arrange(desc(total_goals)) %>%
tail(10)
top_scorers_away <- goals_home_away %>%
filter(context == "Extérieur") %>%
arrange(desc(total_goals)) %>%
tail(10)
# Calcul des pourcentages pour domicile
total_goals_home_sum <- sum(top_scorers_home$total_goals)
top_scorers_home <- top_scorers_home %>%
mutate(percent = round(total_goals / total_goals_home_sum * 100, 2))
# Calcul des pourcentages pour extérieur
total_goals_away_sum <- sum(top_scorers_away$total_goals)
top_scorers_away <- top_scorers_away %>%
mutate(percent = round(total_goals / total_goals_away_sum * 100, 2))
# Créer les diagrammes pour domicile et extérieur
pie_chart_home <- create_pie_chart(top_scorers_home, "Top 10 des Buteurs à Domicile")
pie_chart_away <- create_pie_chart(top_scorers_away, "Top 10 des Buteurs à l'Extérieur")
# Afficher les trois figures en forme de triangle
grid.arrange(pie_chart_global, pie_chart_home, pie_chart_away, nrow = 2, ncol = 2, layout_matrix = rbind(c(1, 1), c(2, 3)))
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Lire les données
data <- read.csv('goalscorers.csv')
results <- read.csv('results.csv')
# Exclure les lignes avec des valeurs NA dans la colonne 'scorer'
data_clean <- na.omit(data)
results_clean <- na.omit(results)
# Préparer les données pour le diagramme circulaire global
player_goals <- data_clean %>%
group_by(scorer) %>%
summarise(total_goals = n(), .groups = "drop") %>%
arrange(desc(total_goals)) %>%
mutate(percent = round(total_goals / sum(total_goals) * 100, 2))
# Sélectionner le top 10 des buteurs
top_scorers <- tail(player_goals, 10)
# Palette de couleurs
color_palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(top_scorers$scorer))
# Fonction pour créer un diagramme circulaire avec pourcentages
create_pie_chart <- function(data, title) {
ggplot(data, aes(x="", y=total_goals, fill=scorer)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=color_palette) +
theme_void() +
labs(title = title, x = "", y = "") +
geom_text(aes(label = percent), position=position_stack(vjust=0.5), color="black", size=3)
}
# Calcul des pourcentages
total_goals_sum <- sum(top_scorers$total_goals)
top_scorers <- top_scorers %>%
mutate(percent = round(total_goals / total_goals_sum * 100, 2))
# Créer le diagramme circulaire global
pie_chart_global <- create_pie_chart(top_scorers, "Top 10 des Buteurs")
# Fusionner les données pour l'analyse domicile/extérieur
merged_data <- merge(data_clean, results_clean, by = c("date", "home_team", "away_team"))
merged_data <- merged_data %>%
mutate(context = ifelse(team == home_team, "Domicile", "Extérieur"))
# Calcul des buts à domicile et à l'extérieur
goals_home_away <- merged_data %>%
group_by(scorer, context) %>%
summarise(total_goals = n(), .groups = "drop") %>%
ungroup()
# Sélectionner le top 10 des buteurs à domicile et à l'extérieur
top_scorers_home <- goals_home_away %>%
filter(context == "Domicile") %>%
arrange(desc(total_goals)) %>%
tail(10)
top_scorers_away <- goals_home_away %>%
filter(context == "Extérieur") %>%
arrange(desc(total_goals)) %>%
tail(10)
# Calcul des pourcentages pour domicile
total_goals_home_sum <- sum(top_scorers_home$total_goals)
top_scorers_home <- top_scorers_home %>%
mutate(percent = round(total_goals / total_goals_home_sum * 100, 2))
# Calcul des pourcentages pour extérieur
total_goals_away_sum <- sum(top_scorers_away$total_goals)
top_scorers_away <- top_scorers_away %>%
mutate(percent = round(total_goals / total_goals_away_sum * 100, 2))
# Créer les diagrammes pour domicile et extérieur
pie_chart_home <- create_pie_chart(top_scorers_home, "Top 10 des Buteurs à Domicile")
pie_chart_away <- create_pie_chart(top_scorers_away, "Top 10 des Buteurs à l'Extérieur")
# Afficher les trois figures en forme de triangle
grid.arrange(pie_chart_global, pie_chart_home, pie_chart_away, nrow = 2, ncol = 2, layout_matrix = rbind(c(1, 1), c(2, 3)))
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Lire les données
data <- read.csv('goalscorers.csv')
results <- read.csv('results.csv')
# Exclure les lignes avec des valeurs NA dans la colonne 'scorer'
data_clean <- na.omit(data)
results_clean <- na.omit(results)
# Préparer les données pour le diagramme circulaire global
player_goals <- data_clean %>%
group_by(scorer) %>%
summarise(total_goals = n(), .groups = "drop") %>%
arrange(desc(total_goals)) %>%
mutate(percent = round(total_goals / sum(total_goals) * 100, 2))
# Sélectionner le top 10 des buteurs
top_scorers <- tail(player_goals, 10)
# Palette de couleurs
color_palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(top_scorers$scorer))
# Fonction pour créer un diagramme circulaire avec pourcentages
create_pie_chart <- function(data, title) {
ggplot(data, aes(x="", y=total_goals, fill=scorer)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=color_palette) +
theme_void() +
labs(title = title, x = "", y = "") +
geom_text(aes(label = percent), position=position_stack(vjust=0.5), color="black", size=3)
}
# Calcul des pourcentages
total_goals_sum <- sum(top_scorers$total_goals)
top_scorers <- top_scorers %>%
mutate(percent = round(total_goals / total_goals_sum * 100, 2))
# Créer le diagramme circulaire global
pie_chart_global <- create_pie_chart(top_scorers, "Top 10 des Buteurs")
# Fusionner les données pour l'analyse domicile/extérieur
merged_data <- merge(data_clean, results_clean, by = c("date", "home_team", "away_team"))
merged_data <- merged_data %>%
mutate(context = ifelse(team == home_team, "Domicile", "Extérieur"))
# Calcul des buts à domicile et à l'extérieur
goals_home_away <- merged_data %>%
group_by(scorer, context) %>%
summarise(total_goals = n(), .groups = "drop") %>%
ungroup()
# Sélectionner le top 10 des buteurs à domicile et à l'extérieur
top_scorers_home <- goals_home_away %>%
filter(context == "Domicile") %>%
arrange(desc(total_goals)) %>%
tail(10)
top_scorers_away <- goals_home_away %>%
filter(context == "Extérieur") %>%
arrange(desc(total_goals)) %>%
tail(10)
# Calcul des pourcentages pour domicile
total_goals_home_sum <- sum(top_scorers_home$total_goals)
top_scorers_home <- top_scorers_home %>%
mutate(percent = round(total_goals / total_goals_home_sum * 100, 2))
# Calcul des pourcentages pour extérieur
total_goals_away_sum <- sum(top_scorers_away$total_goals)
top_scorers_away <- top_scorers_away %>%
mutate(percent = round(total_goals / total_goals_away_sum * 100, 2))
# Créer les diagrammes pour domicile et extérieur
pie_chart_home <- create_pie_chart(top_scorers_home, "Top 10 des Buteurs à Domicile")
pie_chart_away <- create_pie_chart(top_scorers_away, "Top 10 des Buteurs à l'Extérieur")
# Afficher les trois figures en forme de triangle
grid.arrange(pie_chart_global, pie_chart_home, pie_chart_away, nrow = 2, ncol = 2, layout_matrix = rbind(c(1, 1), c(2, 3)))
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
# Lire les données
data <- read.csv('goalscorers.csv')
results <- read.csv('results.csv')
# Exclure les lignes avec des valeurs NA dans la colonne 'scorer'
data_clean <- na.omit(data)
results_clean <- na.omit(results)
# Préparer les données pour le diagramme circulaire global
player_goals <- data_clean %>%
group_by(scorer) %>%
summarise(total_goals = n(), .groups = "drop") %>%
arrange(total_goals) %>%
mutate(percent = round(total_goals / sum(total_goals) * 100, 2))
# Sélectionner le top 10 des buteurs
top_scorers <- tail(player_goals, 10)
# Palette de couleurs
color_palette <- colorRampPalette(brewer.pal(9, "Set1"))(length(top_scorers$scorer))
# Fonction pour créer un diagramme circulaire avec pourcentages
create_pie_chart <- function(data, title) {
ggplot(data, aes(x="", y=total_goals, fill=scorer)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
scale_fill_manual(values=color_palette) +
theme_void() +
labs(title = title, x = "", y = "") +
geom_text(aes(label = percent), position=position_stack(vjust=0.5), color="black", size=3)
}
# Calcul des pourcentages
total_goals_sum <- sum(top_scorers$total_goals)
top_scorers <- top_scorers %>%
mutate(percent = round(total_goals / total_goals_sum * 100, 2))
# Créer le diagramme circulaire global
pie_chart_global <- create_pie_chart(top_scorers, "Top 10 des Buteurs")
# Fusionner les données pour l'analyse domicile/extérieur
merged_data <- merge(data_clean, results_clean, by = c("date", "home_team", "away_team"))
merged_data <- merged_data %>%
mutate(context = ifelse(team == home_team, "Domicile", "Extérieur"))
# Calcul des buts à domicile et à l'extérieur
goals_home_away <- merged_data %>%
group_by(scorer, context) %>%
summarise(total_goals = n(), .groups = "drop") %>%
ungroup()
# Sélectionner le top 10 des buteurs à domicile et à l'extérieur
top_scorers_home <- goals_home_away %>%
filter(context == "Domicile") %>%
arrange(total_goals) %>%
tail(10)
top_scorers_away <- goals_home_away %>%
filter(context == "Extérieur") %>%
arrange(total_goals) %>%
tail(10)
# Calcul des pourcentages pour domicile
total_goals_home_sum <- sum(top_scorers_home$total_goals)
top_scorers_home <- top_scorers_home %>%
mutate(percent = round(total_goals / total_goals_home_sum * 100, 2))
# Calcul des pourcentages pour extérieur
total_goals_away_sum <- sum(top_scorers_away$total_goals)
top_scorers_away <- top_scorers_away %>%
mutate(percent = round(total_goals / total_goals_away_sum * 100, 2))
# Créer les diagrammes pour domicile et extérieur
pie_chart_home <- create_pie_chart(top_scorers_home, "Top 10 des Buteurs à Domicile")
pie_chart_away <- create_pie_chart(top_scorers_away, "Top 10 des Buteurs à l'Extérieur")
# Afficher les trois figures en forme de triangle
grid.arrange(pie_chart_global, pie_chart_home, pie_chart_away, nrow = 2, ncol = 2, layout_matrix = rbind(c(1, 1), c(2, 3)))
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Chargement des bibliothèques nécessaires
library(ggplot2)
library(dplyr)
# Lecture des données
goalscorers <- read.csv("goalscorers.csv")
# Filtration des données pour la première et la deuxième mi-temps
first_half_goals <- filter(goalscorers, minute <= 45)
second_half_goals <- filter(goalscorers, minute > 45 & minute <= 90)
# Création du premier graphique pour la première mi-temps
ggplot(first_half_goals, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Distribution des buts en première mi-temps",
x = "Minute",
y = "Nombre de buts") +
theme_minimal()
# Création du deuxième graphique pour la deuxième mi-temps
ggplot(second_half_goals, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = "salmon", color = "black") +
labs(title = "Distribution des buts en deuxième mi-temps",
x = "Minute",
y = "Nombre de buts") +
theme_minimal()
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Chargement des bibliothèques nécessaires
library(ggplot2)
library(dplyr)
library(gridExtra)
# Lecture des données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusion des données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Définition des conditions pour les différents cas
own_goals_first_half <- filter(merged_data, own_goal == TRUE, minute <= 45)
own_goals_second_half <- filter(merged_data, own_goal == TRUE, minute > 45 & minute <= 90)
penalties_first_half <- filter(merged_data, penalty == TRUE, minute <= 45)
penalties_second_half <- filter(merged_data, penalty == TRUE, minute > 45 & minute <= 90)
# Fonction pour créer un graphique de distribution des scores
create_score_plot <- function(data, title) {
ggplot(data, aes(x = home_score - away_score)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = title, x = "Différence de Score", y = "Nombre de Matchs") +
theme_minimal()
}
# Création des graphiques
p1 <- create_score_plot(own_goals_first_half, "Score Final - Buts CSC (1ère Mi-Temps)")
p2 <- create_score_plot(own_goals_second_half, "Score Final - Buts CSC (2ème Mi-Temps)")
p3 <- create_score_plot(penalties_first_half, "Score Final - Penalties (1ère Mi-Temps)")
p4 <- create_score_plot(penalties_second_half, "Score Final - Penalties (2ème Mi-Temps)")
# Affichage des graphiques côte à côte
grid.arrange(p1, p2, p3, p4, ncol = 2)
# Chargement des bibliothèques nécessaires
library(ggplot2)
library(dplyr)
library(gridExtra)
# Lecture des données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusion des données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Définition des conditions pour les différents cas
own_goals_first_half <- filter(merged_data, own_goal == TRUE, minute <= 45)
own_goals_second_half <- filter(merged_data, own_goal == TRUE, minute > 45 & minute <= 90)
penalties_first_half <- filter(merged_data, penalty == TRUE, minute <= 45)
penalties_second_half <- filter(merged_data, penalty == TRUE, minute > 45 & minute <= 90)
# Fonction pour créer un graphique de distribution des scores
create_score_plot <- function(data, title) {
ggplot(data, aes(x = home_score - away_score)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(title = title, x = "Différence de Score", y = "Nombre de Matchs") +
theme_minimal()
}
# Création des graphiques
p1 <- create_score_plot(own_goals_first_half, "Score Final - Buts CSC (1ère Mi-Temps)")
p2 <- create_score_plot(own_goals_second_half, "Score Final - Buts CSC (2ème Mi-Temps)")
p3 <- create_score_plot(penalties_first_half, "Score Final - Penalties (1ère Mi-Temps)")
p4 <- create_score_plot(penalties_second_half, "Score Final - Penalties (2ème Mi-Temps)")
# Affichage des graphiques côte à côte
grid.arrange(p1, p2, p3, p4, ncol = 2)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Chargement des bibliothèques nécessaires
library(ggplot2)
library(dplyr)
library(gridExtra)
# Lecture des données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusion des données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Ajout d'une colonne de différence de score
merged_data$score_diff <- with(merged_data, home_score - away_score)
# Identification des matchs avec buts CSC et penalties
merged_data$match_with_own_goal <- with(merged_data, own_goal == TRUE)
merged_data$match_with_penalty <- with(merged_data, penalty == TRUE)
# Agrégation pour obtenir le score final des matchs avec et sans CSC/Penalties
own_goal_impact <- merged_data %>%
group_by(date, home_team, away_team, match_with_own_goal) %>%
summarise(final_score_diff = max(score_diff)) %>%
ungroup()
penalty_impact <- merged_data %>%
group_by(date, home_team, away_team, match_with_penalty) %>%
summarise(final_score_diff = max(score_diff)) %>%
ungroup()
# Création des graphiques
p1 <- ggplot(own_goal_impact, aes(x = final_score_diff, fill = match_with_own_goal)) +
geom_histogram(binwidth = 1) +
labs(title = "Impact des Buts CSC sur le Score Final",
x = "Différence de Score Final",
y = "Nombre de Matchs") +
scale_fill_discrete(name = "But CSC") +
theme_minimal()
p2 <- ggplot(penalty_impact, aes(x = final_score_diff, fill = match_with_penalty)) +
geom_histogram(binwidth = 1) +
labs(title = "Impact des Penalties sur le Score Final",
x = "Différence de Score Final",
y = "Nombre de Matchs") +
scale_fill_discrete(name = "Penalty") +
theme_minimal()
# Affichage des graphiques
grid.arrange(p1, p2, ncol = 2)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Chargement des bibliothèques nécessaires
library(ggplot2)
library(dplyr)
# Lecture des données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusion des données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Ajout d'une colonne de différence de score
merged_data$score_diff <- with(merged_data, home_score - away_score)
# Identification des matchs avec buts CSC et penalties
merged_data$match_with_own_goal <- with(merged_data, own_goal == TRUE)
merged_data$match_with_penalty <- with(merged_data, penalty == TRUE)
# Création du diagramme en boîte pour les matchs avec et sans Buts CSC
boxplot_data_own_goal <- merged_data %>%
filter(match_with_own_goal) %>%
group_by(match_with_own_goal) %>%
summarize(score_diff = list(score_diff))
# Création du diagramme en boîte pour les matchs avec et sans Penalties
boxplot_data_penalty <- merged_data %>%
filter(match_with_penalty) %>%
group_by(match_with_penalty) %>%
summarize(score_diff = list(score_diff))
# Création des diagrammes en boîte
p1 <- ggplot(boxplot_data_own_goal, aes(x = "", y = score_diff, fill = match_with_own_goal)) +
geom_boxplot() +
labs(title = "Impact des Buts CSC sur le Score Final",
y = "Différence de Score Final") +
scale_fill_discrete(name = "But CSC") +
theme_minimal() +
theme(legend.position = "none")
p2 <- ggplot(boxplot_data_penalty, aes(x = "", y = score_diff, fill = match_with_penalty)) +
geom_boxplot() +
labs(title = "Impact des Penalties sur le Score Final",
y = "Différence de Score Final") +
scale_fill_discrete(name = "Penalty") +
theme_minimal() +
theme(legend.position = "none")
# Affichage des diagrammes en boîte
grid.arrange(p1, p2, ncol = 2)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Création des graphiques
p1 <- ggplot(own_goal_impact, aes(x = final_score_diff, fill = match_with_own_goal)) +
geom_histogram(binwidth = 1) +
labs(title = "Impact des Buts CSC sur le Score Final",
x = "Différence de Score Final",
y = "Nombre de Matchs") +
scale_fill_discrete(name = "But CSC") +
theme_minimal()
p2 <- ggplot(penalty_impact, aes(x = final_score_diff, fill = match_with_penalty)) +
geom_histogram(binwidth = 1) +
labs(title = "Impact des Penalties sur le Score Final",
x = "Différence de Score Final",
y = "Nombre de Matchs") +
scale_fill_discrete(name = "Penalty") +
theme_minimal()
# Affichage des graphiques
grid.arrange(p1, p2, ncol = 2)
