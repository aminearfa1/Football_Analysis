group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
top_away_scorers <- merged_data %>%
filter(team == away_team) %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
create_pie_chart <- function(data, title) {
# Filtrer pour enlever les NA avant de calculer les pourcentages
data <- data %>% filter(!is.na(scorer))
ggplot(data, aes(x = "", y = goals, fill = reorder(scorer, -goals))) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = title, fill = "Scorer") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5), size = 3) # Ajuster la taille ici
}
# Ensuite, vous pouvez créer vos diagrammes et les afficher comme avant
plot1 <- create_pie_chart(top_scorers, "Top 10 Goal Scorers")
plot2 <- create_pie_chart(top_home_scorers, "Top 10 Home Goal Scorers")
plot3 <- create_pie_chart(top_away_scorers, "Top 10 Away Goal Scorers")
# Définir la matrice de mise en page pour la disposition en triangle
layout_matrix <- matrix(c(NA, 1, NA,
2, NA, 3),
nrow = 2, byrow = TRUE)
# Afficher les diagrammes en forme de triangle
grid.arrange(plot1, plot2, plot3, layout_matrix = layout_matrix)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(tidyverse)
library(dplyr)
library(gridExtra)
###############################################################################
#Analyse des Modèles de Marquage de Buts
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusionner les données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Calculer les meilleurs buteurs dans chaque catégorie
top_scorers <- goalscorers %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
top_home_scorers <- merged_data %>%
filter(team == home_team) %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
top_away_scorers <- merged_data %>%
filter(team == away_team) %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
create_pie_chart <- function(data, title) {
# Filtrer pour enlever les NA avant de calculer les pourcentages
data <- data %>% filter(!is.na(scorer))
ggplot(data, aes(x = "", y = goals, fill = reorder(scorer, -goals))) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = title, fill = "Scorer") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5), size = 3) # Ajuster la taille ici
}
# Ensuite, vous pouvez créer vos diagrammes et les afficher comme avant
plot1 <- create_pie_chart(top_scorers, "Top 10 Goal Scorers")
plot2 <- create_pie_chart(top_home_scorers, "Top 10 Home Goal Scorers")
plot3 <- create_pie_chart(top_away_scorers, "Top 10 Away Goal Scorers")
# Définir la matrice de mise en page pour la disposition en triangle
layout_matrix <- matrix(c(NA, 1, NA,
2, NA, 3),
nrow = 2, byrow = TRUE)
# Afficher les diagrammes en forme de triangle
grid.arrange(plot1, plot2, plot3, layout_matrix = layout_matrix)
# Afficher les diagrammes en forme de triangle
grid.arrange(plot1, plot2, plot3, layout_matrix = layout_matrix)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
# Séparer les buts en fonction de la mi-temps
first_half_goals <- goalscorers %>% filter(half == 1)
# Créer un histogramme pour les buts de la première mi-temps
first_half_plot <- ggplot(first_half_goals, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = "blue") +
labs(title = "Distribution des buts en première mi-temps", x = "Minute", y = "Nombre de buts")
# Créer un histogramme pour les buts de la deuxième mi-temps
second_half_plot <- ggplot(second_half_goals, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = "red") +
labs(title = "Distribution des buts en deuxième mi-temps", x = "Minute", y = "Nombre de buts")
# Afficher les deux graphiques côte à côte
grid.arrange(first_half_plot, second_half_plot, ncol = 2)
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Séparer les buts en fonction de la mi-temps en assumant que la première mi-temps est de 1 à 45 minutes
# et la deuxième mi-temps de 46 à 90 minutes (en ajustant selon votre jeu de données spécifique)
first_half_goals <- goalscorers %>% filter(minute <= 45)
second_half_goals <- goalscorers %>% filter(minute > 45 & minute <= 90)
# Créer un histogramme pour les buts de la première mi-temps
first_half_plot <- ggplot(first_half_goals, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = "blue") +
labs(title = "Distribution des buts en première mi-temps", x = "Minute du but", y = "Nombre de buts") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Créer un histogramme pour les buts de la deuxième mi-temps
second_half_plot <- ggplot(second_half_goals, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = "red") +
labs(title = "Distribution des buts en deuxième mi-temps", x = "Minute du but", y = "Nombre de buts") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Afficher les deux graphiques côte à côte
grid.arrange(first_half_plot, second_half_plot, ncol = 2)
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
library(viridis)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusionner les données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Calculer les meilleurs buteurs dans chaque catégorie
top_scorers <- goalscorers %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
top_home_scorers <- merged_data %>%
filter(team == home_team) %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
top_away_scorers <- merged_data %>%
filter(team == away_team) %>%
group_by(scorer) %>%
summarise(goals = n()) %>%
arrange(desc(goals)) %>%
slice_max(order_by = goals, n = 10) %>%
mutate(percentage = goals / sum(goals) * 100)
create_pie_chart <- function(data, title) {
# Filtrer pour enlever les NA avant de calculer les pourcentages
data <- data %>% filter(!is.na(scorer))
ggplot(data, aes(x = "", y = goals, fill = reorder(scorer, -goals))) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
labs(title = title, fill = "Scorer") +
geom_text(aes(label = paste0(round(percentage, 1), "%")), position = position_stack(vjust = 0.5), size = 3) # Ajuster la taille ici
}
# Ensuite, vous pouvez créer vos diagrammes et les afficher comme avant
plot1 <- create_pie_chart(top_scorers, "Top 10 Goal Scorers")
plot2 <- create_pie_chart(top_home_scorers, "Top 10 Home Goal Scorers")
plot3 <- create_pie_chart(top_away_scorers, "Top 10 Away Goal Scorers")
# Définir la matrice de mise en page pour la disposition en triangle
layout_matrix <- matrix(c(NA, 1, NA,
2, NA, 3),
nrow = 2, byrow = TRUE)
# Afficher les diagrammes en forme de triangle
grid.arrange(plot1, plot2, plot3, layout_matrix = layout_matrix)
# Séparer les buts en fonction de la mi-temps
first_half_goals <- goalscorers %>% filter(minute <= 45)
second_half_goals <- goalscorers %>% filter(minute > 45 & minute <= 90)
# Fonction pour créer un histogramme avec une palette de couleurs viridis
create_histogram <- function(data, title, color) {
ggplot(data, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = color, color = "white") +
labs(title = title, x = "Minute du but", y = "Nombre de buts") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12))
}
# Créer un histogramme pour les buts de la première mi-temps
first_half_plot <- create_histogram(first_half_goals, "Distribution des buts en première mi-temps", viridis::viridis(1))
# Créer un histogramme pour les buts de la deuxième mi-temps
second_half_plot <- create_histogram(second_half_goals, "Distribution des buts en deuxième mi-temps", viridis::plasma(1))
# Afficher les deux graphiques côte à côte
grid.arrange(first_half_plot, second_half_plot, ncol = 2)
# Créer un histogramme pour les buts de la deuxième mi-temps
second_half_plot <- create_histogram(second_half_goals, "Distribution des buts en deuxième mi-temps", viridis::plasma(1))
# Afficher les deux graphiques côte à côte
grid.arrange(first_half_plot, second_half_plot, ncol = 2)
# Supposons que 'own_goal' et 'penalty' sont des colonnes dans 'goalscorers' qui indiquent si un but est un but contre son camp ou un penalty
# Nous allons également créer une colonne 'type' pour distinguer les différents types de buts
goalscorers$type <- case_when(
goalscorers$own_goal == TRUE ~ "Own Goal",
goalscorers$penalty == TRUE ~ "Penalty",
TRUE ~ "Regular Goal"
)
# Créer des sous-ensembles de données pour les différents types de buts
own_goals_data <- goalscorers %>% filter(own_goal == TRUE)
penalty_data <- goalscorers %>% filter(penalty == TRUE)
regular_goals_data <- goalscorers %>% filter(own_goal == FALSE & penalty == FALSE)
# Fonction pour créer des histogrammes
create_histogram <- function(data, title, fill_color) {
ggplot(data, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = fill_color) +
labs(title = title, x = "Minute du but", y = "Nombre de buts") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
}
# Créer des histogrammes pour chaque type de but
own_goal_plot <- create_histogram(own_goals_data, "Buts contre son camp", "darkorange")
penalty_plot <- create_histogram(penalty_data, "Penalties", "forestgreen")
regular_goal_plot <- create_histogram(regular_goals_data, "Buts réguliers", "steelblue")
# Organiser les graphiques côte à côte avec patchwork
(own_goal_plot | penalty_plot | regular_goal_plot) +
plot_layout(guides = 'collect') &
theme(legend.position = 'bottom')
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
library(viridis)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Supposons que 'own_goal' et 'penalty' sont des colonnes dans 'goalscorers' qui indiquent si un but est un but contre son camp ou un penalty
# Nous allons également créer une colonne 'type' pour distinguer les différents types de buts
goalscorers$type <- case_when(
goalscorers$own_goal == TRUE ~ "Own Goal",
goalscorers$penalty == TRUE ~ "Penalty",
TRUE ~ "Regular Goal"
)
# Créer des sous-ensembles de données pour les différents types de buts
own_goals_data <- goalscorers %>% filter(own_goal == TRUE)
penalty_data <- goalscorers %>% filter(penalty == TRUE)
regular_goals_data <- goalscorers %>% filter(own_goal == FALSE & penalty == FALSE)
# Fonction pour créer des histogrammes
create_histogram <- function(data, title, fill_color) {
ggplot(data, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = fill_color) +
labs(title = title, x = "Minute du but", y = "Nombre de buts") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
}
# Créer des histogrammes pour chaque type de but
own_goal_plot <- create_histogram(own_goals_data, "Buts contre son camp", "darkorange")
penalty_plot <- create_histogram(penalty_data, "Penalties", "forestgreen")
regular_goal_plot <- create_histogram(regular_goals_data, "Buts réguliers", "steelblue")
# Organiser les graphiques côte à côte avec patchwork
(own_goal_plot | penalty_plot | regular_goal_plot) +
plot_layout(guides = 'collect') &
theme(legend.position = 'bottom')
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
library(viridis)
library(patchwork)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Supposons que 'own_goal' et 'penalty' sont des colonnes dans 'goalscorers' qui indiquent si un but est un but contre son camp ou un penalty
# Nous allons également créer une colonne 'type' pour distinguer les différents types de buts
goalscorers$type <- case_when(
goalscorers$own_goal == TRUE ~ "Own Goal",
goalscorers$penalty == TRUE ~ "Penalty",
TRUE ~ "Regular Goal"
)
# Créer des sous-ensembles de données pour les différents types de buts
own_goals_data <- goalscorers %>% filter(own_goal == TRUE)
penalty_data <- goalscorers %>% filter(penalty == TRUE)
regular_goals_data <- goalscorers %>% filter(own_goal == FALSE & penalty == FALSE)
# Fonction pour créer des histogrammes
create_histogram <- function(data, title, fill_color) {
ggplot(data, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = fill_color) +
labs(title = title, x = "Minute du but", y = "Nombre de buts") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
}
# Créer des histogrammes pour chaque type de but
own_goal_plot <- create_histogram(own_goals_data, "Buts contre son camp", "darkorange")
penalty_plot <- create_histogram(penalty_data, "Penalties", "forestgreen")
regular_goal_plot <- create_histogram(regular_goals_data, "Buts réguliers", "steelblue")
# Organiser les graphiques côte à côte avec patchwork
(own_goal_plot | penalty_plot | regular_goal_plot) +
plot_layout(guides = 'collect') &
theme(legend.position = 'bottom')
# Fonction pour créer des diagrammes
create_impact_plot <- function(data, title) {
ggplot(data, aes(x = factor(score_final), fill = factor(score_final))) +
geom_bar() +
labs(title = title, x = "Score Final", y = "Nombre de Matches") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
}
# Créer des histogrammes pour chaque type de but et mi-temps
own_goals_first_plot <- create_impact_plot(own_goals_first_half, "Impact des Buts Contre Son Camp en Première Mi-temps")
own_goals_second_plot <- create_impact_plot(own_goals_second_half, "Impact des Buts Contre Son Camp en Deuxième Mi-temps")
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
library(viridis)
library(patchwork)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusionner les jeux de données en fonction des colonnes communes (comme 'match_id' ou autre identifiant unique)
merged_data <- merge(goalscorers, results, by = "match_id")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Charger les données fusionnées
merged_data <- read.csv("merged_data.csv")
# Ajouter une colonne pour indiquer la mi-temps en fonction de la minute du but
merged_data <- merged_data %>%
mutate(half = if_else(minute <= 45, 'First Half', 'Second Half'))
# Analyser l'impact des buts contre son camp
own_goals_impact <- merged_data %>%
filter(own_goal == TRUE) %>%
group_by(half, home_team, away_team, home_score, away_score) %>%
summarise(own_goals = n(), .groups = 'drop') %>%
mutate(score_diff = abs(home_score - away_score))
# Analyser l'impact des penalties
penalties_impact <- merged_data %>%
filter(penalty == TRUE) %>%
group_by(half, home_team, away_team, home_score, away_score) %>%
summarise(penalties = n(), .groups = 'drop') %>%
mutate(score_diff = abs(home_score - away_score))
# Créer des graphiques pour visualiser l'impact
own_goals_plot <- ggplot(own_goals_impact, aes(x = score_diff, y = own_goals)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Buts contre son Camp par Mi-temps",
x = "Différence de Score", y = "Nombre de Buts contre son Camp")
penalties_plot <- ggplot(penalties_impact, aes(x = score_diff, y = penalties)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Penalties par Mi-temps",
x = "Différence de Score", y = "Nombre de Penalties")
# Afficher les graphiques
gridExtra::grid.arrange(own_goals_plot, penalties_plot, ncol = 2)
library(tidyverse)
# Charger les données fusionnées
merged_data <- read.csv("merged_data.csv")
# Ajouter une colonne pour indiquer la mi-temps en fonction de la minute du but
merged_data <- merged_data %>%
mutate(half = if_else(minute <= 45, 'First Half', 'Second Half'))
# Analyser l'impact des buts contre son camp
own_goals_impact <- merged_data %>%
filter(own_goal == TRUE) %>%
group_by(half, home_team, away_team, home_score, away_score) %>%
summarise(own_goals = n(), .groups = 'drop') %>%
mutate(score_diff = abs(home_score - away_score))
# Analyser l'impact des penalties
penalties_impact <- merged_data %>%
filter(penalty == TRUE) %>%
group_by(half, home_team, away_team, home_score, away_score) %>%
summarise(penalties = n(), .groups = 'drop') %>%
mutate(score_diff = abs(home_score - away_score))
# Créer des graphiques pour visualiser l'impact
own_goals_plot <- ggplot(own_goals_impact, aes(x = score_diff, y = own_goals)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Buts contre son Camp par Mi-temps",
x = "Différence de Score", y = "Nombre de Buts contre son Camp")
penalties_plot <- ggplot(penalties_impact, aes(x = score_diff, y = penalties)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Penalties par Mi-temps",
x = "Différence de Score", y = "Nombre de Penalties")
# Afficher les graphiques
gridExtra::grid.arrange(own_goals_plot, penalties_plot, ncol = 2)
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
library(viridis)
library(patchwork)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
# Fusionner les données de buteurs et de résultats
merged_data <- merge(goalscorers, results, by = c("date", "home_team", "away_team"))
# Ajouter une colonne pour indiquer la mi-temps
goalscorers <- goalscorers %>%
mutate(half = if_else(minute <= 45, 'First Half', 'Second Half'))
# Créer une fonction pour analyser l'impact par type de but
analyze_impact <- function(data, type_col) {
data %>%
filter(!!sym(type_col) == TRUE) %>%
left_join(results, by = c("date", "home_team", "away_team")) %>%
group_by(half, home_team, away_team) %>%
summarise(impact = n(), .groups = 'drop') %>%
mutate(score_diff = abs(home_score - away_score))
}
# Analyser l'impact des buts contre son camp et des penalties
own_goals_impact <- analyze_impact(goalscorers, "own_goal")
penalties_impact <- analyze_impact(goalscorers, "penalty")
# Créer des graphiques pour visualiser l'impact
own_goals_plot <- ggplot(own_goals_impact, aes(x = score_diff, y = impact)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Buts contre son Camp par Mi-temps",
x = "Différence de Score", y = "Nombre de Buts contre son Camp")
penalties_plot <- ggplot(penalties_impact, aes(x = score_diff, y = impact)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Penalties par Mi-temps",
x = "Différence de Score", y = "Nombre de Penalties")
# Afficher les graphiques
gridExtra::grid.arrange(own_goals_plot, penalties_plot, ncol = 2)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
# Définir la matrice de mise en page pour la disposition en triangle
layout_matrix <- matrix(c(NA, 1, NA,
2, NA, 3),
nrow = 2, byrow = TRUE)
# Afficher les diagrammes en forme de triangle
grid.arrange(plot1, plot2, plot3, layout_matrix = layout_matrix)
# Séparer les buts en fonction de la mi-temps
first_half_goals <- goalscorers %>% filter(minute <= 45)
second_half_goals <- goalscorers %>% filter(minute > 45 & minute <= 90)
# Fonction pour créer un histogramme avec une palette de couleurs viridis
create_histogram <- function(data, title, color) {
ggplot(data, aes(x = minute)) +
geom_histogram(binwidth = 1, fill = color, color = "white") +
labs(title = title, x = "Minute du but", y = "Nombre de buts") +
theme_minimal(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12))
}
# Créer un histogramme pour les buts de la première mi-temps
first_half_plot <- create_histogram(first_half_goals, "Distribution des buts en première mi-temps", viridis::viridis(1))
# Créer un histogramme pour les buts de la deuxième mi-temps
second_half_plot <- create_histogram(second_half_goals, "Distribution des buts en deuxième mi-temps", viridis::plasma(1))
# Afficher les deux graphiques côte à côte
grid.arrange(first_half_plot, second_half_plot, ncol = 2)
# Ajouter une colonne pour indiquer la mi-temps
goalscorers <- goalscorers %>%
mutate(half = if_else(minute <= 45, 'First Half', 'Second Half'))
# Créer une fonction pour analyser l'impact par type de but
analyze_impact <- function(data, type_col) {
data %>%
filter(!!sym(type_col) == TRUE) %>%
left_join(results, by = c("date", "home_team", "away_team")) %>%
group_by(half, home_team, away_team) %>%
summarise(impact = n(), .groups = 'drop') %>%
mutate(score_diff = abs(home_score - away_score))
}
# Analyser l'impact des buts contre son camp et des penalties
own_goals_impact <- analyze_impact(goalscorers, "own_goal")
penalties_impact <- analyze_impact(goalscorers, "penalty")
# Créer des graphiques pour visualiser l'impact
own_goals_plot <- ggplot(own_goals_impact, aes(x = score_diff, y = impact)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Buts contre son Camp par Mi-temps",
x = "Différence de Score", y = "Nombre de Buts contre son Camp")
penalties_plot <- ggplot(penalties_impact, aes(x = score_diff, y = impact)) +
geom_col() +
facet_wrap(~half) +
labs(title = "Impact des Penalties par Mi-temps",
x = "Différence de Score", y = "Nombre de Penalties")
# Afficher les graphiques
gridExtra::grid.arrange(own_goals_plot, penalties_plot, ncol = 2)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(tidyverse)
library(dplyr)
library(gridExtra)
library(lubridate)
library(ggthemes)
library(viridis)
library(patchwork)
# Charger les données
goalscorers <- read.csv("goalscorers.csv")
results <- read.csv("results.csv")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
library(tidyverse)
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
source("C:/Users/arfaa/Desktop/Football_Analysis/R_project/Football_Analysis.R")
